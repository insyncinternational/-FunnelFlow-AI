version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: saas_funnel_db
    environment:
      POSTGRES_DB: saas_funnel_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ../database/seeds/initial_data.sql:/docker-entrypoint-initdb.d/02-seeds.sql
    ports:
      - "5432:5432"
    networks:
      - saas_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: saas_funnel_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - saas_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: saas_funnel_backend
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=saas_funnel_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key
      - FRONTEND_URL=http://localhost:3000
      - HEYGEN_API_KEY=your-heygen-api-key
      - STRIPE_SECRET_KEY=your-stripe-secret-key
      - STRIPE_WEBHOOK_SECRET=your-stripe-webhook-secret
    ports:
      - "5000:5000"
    depends_on:
      - database
      - redis
    networks:
      - saas_network
    restart: unless-stopped
    volumes:
      - ../backend:/app
      - /app/node_modules

  # Frontend React App
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: saas_funnel_frontend
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:5000/api
      - VITE_STRIPE_PUBLISHABLE_KEY=your-stripe-publishable-key
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - saas_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: saas_funnel_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - saas_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  saas_network:
    driver: bridge
